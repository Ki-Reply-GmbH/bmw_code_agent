import os
import pull_request_agent.src.prompts as prompts
import httpx
from openai import AzureOpenAI
client = AzureOpenAI(api_key=os.getenv('OPENAI_API_KEY'), api_version=
    '2024-02-01', azure_endpoint=os.getenv('AZURE_OPENAI_ENDPOINT'),
    http_client=httpx.Client(proxies=os.environ['HTTPS_PROXY'], timeout=
    httpx.Timeout(600.0, read=600.0)))


def get_completion(prompt, model='GCDM-EMEA-GPT4', type='text'):
    """
    Sends a prompt to the OpenAI API and returns the AI"s response.
    """
    messages = [{'role': 'system', 'content':
        'You are a system designed to improve code quality.'}, {'role':
        'user', 'content': prompt}]
    response = client.chat.completions.create(model=model, messages=
        messages, temperature=0, response_format={'type': type})
    return response.choices[0].message.content


class PRAgent:
    """
    The PRAgent class is designed to manage and automate the generation of summaries and titles for pull requests. It utilizes models for handling JSON and text data to process changes in code and commit messages, facilitating efficient pull request management. The class supports operations such as setting memory for different agents (merge and code quality), generating summaries and titles based on the stored data, and handling errors. It also provides functionality to retrieve current summaries and titles, and to log the generated responses to a file. This class is essential for developers and teams looking to streamline their code review and merge processes.
    """

    def __init__(self, json_model='GCDM-EMEA-GPT4-1106', text_model=
        'GCDM-EMEA-GPT4'):
        """
        Initializes a new instance of the PRAgent class with specified models for handling JSON and text data.

        Args:
            json_model (str): The model identifier for handling JSON data.
            text_model (str): The model identifier for handling text data.

        Attributes:
            memory_merge_agent (dict): Stores data related to merge operations including files changed, code changes, and commit messages.
            memory_cq_agent (dict): Stores data related to code quality checks including files changed, code changes, and commit messages.
            response (str): Stores the latest response generated by the agent.
            title (str): Stores the latest title generated by the agent.
        """
        self.memory_merge_agent = {'files_changed': [], 'code_changes': [],
            'commit_message': ''}
        self.memory_cq_agent = {'files_changed': [], 'code_changes': [],
            'commit_message': ''}
        self.response = ''
        self.title = ''
        self.json_model = json_model
        self.text_model = text_model

    def get_summary(self):
        """
        Returns the current summary response stored in the PRAgent instance.
        """
        return self.response

    def get_title(self):
        """
        Returns the title of the current pull request agent instance.
        """
        return self.title

    def set_memory(self, agent, files_changed, code_changes, commit_message):
        """
        Updates the memory storage for the specified agent with new data about files changed, code changes, and commit message.

        Args:
            agent (str): The name of the agent to update. Can be 'merge_agent' or 'cq_agent'.
            files_changed (list): A list of files that have been changed.
            code_changes (list): A list describing the changes made to the code.
            commit_message (str): The commit message associated with the changes.

        """
        if agent == 'merge_agent':
            self.memory_merge_agent['files_changed'] = files_changed
            self.memory_merge_agent['code_changes'] = code_changes
            self.memory_merge_agent['commit_message'] = commit_message
        elif agent == 'cq_agent':
            self.memory_cq_agent['files_changed'] = files_changed
            self.memory_cq_agent['code_changes'] = code_changes
            self.memory_cq_agent['commit_message'] = commit_message

    def make_summary(self):
        """
        Generates a summary based on the changes recorded in the memory of merge and code quality agents.

        This method constructs a prompt using the current state of `memory_merge_agent` and `memory_cq_agent`,
        formats it using predefined prompts, and sends it to the OpenAI API to generate a summary. The response
        from the API is then stored in the `response` attribute of the instance.
        """
        response = get_completion(prompts.pr_user_prompt.format(
            memory_merge_agent=self.memory_merge_agent, memory_cq_agent=
            self.memory_cq_agent), model=self.text_model)
        self.response = response

    def make_title(self):
        """
        Generates a title for a pull request based on previous responses using the OpenAI API.
        """
        response = get_completion(prompts.pr_title_system_prompt.format(
            prev_responses=self.response), model=self.text_model)
        self.title = response

    def report_error(self, error_message):
        """
        Logs an error message by setting the agent's response attribute to the provided error message.
        :param error_message: The error message to be logged.
        """
        self.response = error_message

    def write_response(self):
        """
        Writes the response title and response content to a file named 'response.txt'.

        The method writes the title followed by a newline, and then the response content directly below it.
        """
        with open('response.txt', 'w') as f:
            f.write(self.title + '\n')
            f.write(self.response)

    def __str__(self):
        """
        Returns a string representation of the PRAgent instance, detailing the memory states of both the merge agent and the code quality agent.
        """
        return f"""Merge Agent Memory: {self.memory_merge_agent}
Code Quality Agent Memory: {self.memory_cq_agent}"""
