prompt
Ck91dHB1dCBqc29uIHdpdGggdGhlIDIga2V5cyAnZXhwbGFuYXRpb24nIGFuZCAnY29kZScuIFRoZSBmaXJzdCBrZXkncyB2YWx1ZSAoc3RyKSBzaG91bGQgZXhwbGFpbiB3aGF0IHN0ZXBzIHlvdSB0b29rIHRvIHJlc29sdmUgdGhlIG1lcmdlIGNvbmZsaWN0cyBhbmQgd2h5IHlvdSBkaWQgc28uIFRoZSBzZWNvbmQga2V5J3MgdmFsdWUgKHN0cikgaXMgdGhlIG1lcmdlIGNvbmZsaWN0IHJlc29sdmVkIGNvZGUuIApKdXN0IG91dHB1dCB0aGUgY29kZSBzbyB0aGF0IGl0IGNhbiBiZSB3cml0dGVuIHRvIGEgZmlsZSAoLnB5LCAubWQsIGV0Yy4pIHdpdGhvdXQgZXJyb3JzLgoKTWVyZ2UgY29uZmxpY3RlZCBmaWxlIGNvbnRlbnQ6CiMgUG9zdGFsIFBhY2thZ2UgVHJhY2tpbmcgU2VydmljZSBBUEkgRG9jdW1lbnRhdGlvbgoKIyMgT3ZlcnZpZXcKClRoaXMgZG9jdW1lbnQgZGVzY3JpYmVzIHRoZSBBUEkgZm9yIHRoZSBQb3N0YWwgUGFja2FnZSBUcmFja2luZyBTZXJ2aWNlLiBUaGlzIHNlcnZpY2UgYWxsb3dzIGZvciB0aGUgY3JlYXRpb24sIHVwZGF0aW5nLCBhbmQgdHJhY2tpbmcgb2YgcG9zdGFsIHBhY2thZ2VzLgoKIyMgR2V0dGluZyBTdGFydGVkCgpUaGlzIEFQSSBpcyBidWlsdCB1c2luZyBQeXRob24ncyBGYXN0QVBJIGZyYW1ld29yay4gVG8gZ2V0IHN0YXJ0ZWQsIGNsb25lIHRoZSByZXBvc2l0b3J5IGFuZCBpbnN0YWxsIHRoZSByZXF1aXJlZCBkZXBlbmRlbmNpZXMuCgoqKkluc3RhbGxhdGlvbjoqKgoKYGBgYmFzaApnaXQgY2xvbmUgPHJlcG9zaXRvcnktdXJsPgpjZCA8cmVwb3NpdG9yeS1uYW1lPgpwaXAgaW5zdGFsbCAtciByZXF1aXJlbWVudHMudHh0CmBgYAoKKipSdW5uaW5nIHRoZSBBcHBsaWNhdGlvbjoqKgoKYGBgYmFzaAp1dmljb3JuIGFwcC5tYWluOmFwcCAtLXJlbG9hZApgYGAKCiMjIEF1dGhlbnRpY2F0aW9uCgpUaGUgQVBJIHVzZXMgT0F1dGgyIHdpdGggSldUIHRva2VucyBmb3IgYXV0aGVudGljYXRpb24uIE9idGFpbiBhIHRva2VuIHVzaW5nIHRoZSAvdG9rZW4gZW5kcG9pbnQgYW5kIGluY2x1ZGUgaXQgaW4gdGhlIEF1dGhvcml6YXRpb24gaGVhZGVyIGFzIEJlYXJlciBgPHRva2VuPmAgZm9yIGF1dGhlbnRpY2F0ZWQgcmVxdWVzdHMuCgojIyBBUEkgRW5kcG9pbnRzCgo8PDw8PDw8IEhFQUQKU3lzdGVtIE1hbmFnZW1lbnQKR0VUIC9zdGF0dXMKR2V0IHRoZSBzdGF0dXMgb2YgdGhlIEFQSS4KClVzZXIgTWFuYWdlbWVudApQT1NUIC90b2tlbgpPYnRhaW4gYW4gYWNjZXNzIHRva2VuLgoKR0VUIC91c2Vycy9tZQpSZXRyaWV2ZSB0aGUgY3VycmVudCB1c2VyJ3MgZGV0YWlscy4KPT09PT09PQojIyMgU2VydmljZSBNYW5hZ2VtZW50CgpgR0VUIC9zdGF0dXNgCgpHZXQgdGhlIHN0YXR1cyBvZiB0aGUgQVBJLgoKIyMjIFJvdXRlIE1hbmFnZW1lbnQKCmBQT1NUIC9wYWNrYWdlcy97cGFja2FnZV9pZH0vY2FsY3VsYXRlLXJvdXRlYAoKQ2FsY3VsYXRlIGFuZCB1cGRhdGUgdGhlIHJvdXRlIGZvciBhIHNwZWNpZmljIHBhY2thZ2UuIFJlcXVpcmVzIHRoZSBwYWNrYWdlIElELgpSb3V0ZSBDYWxjdWxhdGlvbiBMb2dpYwoKVGhpcyBzZWN0aW9uIHdvdWxkIGRldGFpbCBob3cgdGhlIHJvdXRlIGNhbGN1bGF0aW9uIGlzIHBlcmZvcm1lZCwgbGltaXRhdGlvbnMsIGFuZCBhbnkgZXh0ZXJuYWwgc2VydmljZXMgb3IgYWxnb3JpdGhtcyB1c2VkLgo+Pj4+Pj4+IG1haW4KCiMjIEVycm9yIEhhbmRsaW5nCgpUaGUgQVBJIHVzZXMgc3RhbmRhcmQgSFRUUCByZXNwb25zZSBjb2RlcyB0byBpbmRpY2F0ZSB0aGUgc3VjY2VzcyBvciBmYWlsdXJlIG9mIGFuIEFQSSByZXF1ZXN0LiBJbiBjYXNlIG9mIGFuIGVycm9yLCB0aGUgcmVzcG9uc2Ugd2lsbCBpbmNsdWRlIGEgSlNPTiBvYmplY3Qgd2l0aCBtb3JlIGluZm9ybWF0aW9uLgoKIyMgRGVwbG95bWVudAoKUmVmZXIgdG8gdGhlIFRlcnJhZm9ybSBjb25maWd1cmF0aW9uIGluIHRoZSAvdGVycmFmb3JtIGRpcmVjdG9yeSBmb3IgZGVwbG95bWVudCBpbnN0cnVjdGlvbnMuCgojIyBDb250cmlidXRpbmcKCkNvbnRyaWJ1dGlvbnMgdG8gdGhpcyBwcm9qZWN0IGFyZSB3ZWxjb21lLiBQbGVhc2UgZm9sbG93IHRoZSBzdGFuZGFyZCBmb3JrLWFuZC1wdWxsLXJlcXVlc3Qgd29ya2Zsb3cuCgojIyBMaWNlbnNlCgpTcGVjaWZ5IHRoZSBsaWNlbnNlIHVuZGVyIHdoaWNoIHlvdXIgcHJvamVjdCBpcyByZWxlYXNlZC4KCg==
Ck91dHB1dCBqc29uIHdpdGggdGhlIDIga2V5cyAnZXhwbGFuYXRpb24nIGFuZCAnY29kZScuIFRoZSBmaXJzdCBrZXkncyB2YWx1ZSAoc3RyKSBzaG91bGQgZXhwbGFpbiB3aGF0IHN0ZXBzIHlvdSB0b29rIHRvIHJlc29sdmUgdGhlIG1lcmdlIGNvbmZsaWN0cyBhbmQgd2h5IHlvdSBkaWQgc28uIFRoZSBzZWNvbmQga2V5J3MgdmFsdWUgKHN0cikgaXMgdGhlIG1lcmdlIGNvbmZsaWN0IHJlc29sdmVkIGNvZGUuIApKdXN0IG91dHB1dCB0aGUgY29kZSBzbyB0aGF0IGl0IGNhbiBiZSB3cml0dGVuIHRvIGEgZmlsZSAoLnB5LCAubWQsIGV0Yy4pIHdpdGhvdXQgZXJyb3JzLgoKTWVyZ2UgY29uZmxpY3RlZCBmaWxlIGNvbnRlbnQ6CmZyb20gc3FsYWxjaGVteSBpbXBvcnQgY3JlYXRlX2VuZ2luZQpmcm9tIHNxbGFsY2hlbXkub3JtIGltcG9ydCBzZXNzaW9ubWFrZXIKZnJvbSBzcWxhbGNoZW15LmV4dC5kZWNsYXJhdGl2ZSBpbXBvcnQgZGVjbGFyYXRpdmVfYmFzZQoKU1FMQUxDSEVNWV9EQVRBQkFTRV9VUkwgPSAic3FsaXRlOi8vLy4vdGVzdC5kYiIKCmVuZ2luZSA9IGNyZWF0ZV9lbmdpbmUoCiAgICBTUUxBTENIRU1ZX0RBVEFCQVNFX1VSTCwgY29ubmVjdF9hcmdzPXsiY2hlY2tfc2FtZV90aHJlYWQiOiBGYWxzZX0KKQpTZXNzaW9uTG9jYWwgPSBzZXNzaW9ubWFrZXIoYXV0b2NvbW1pdD1GYWxzZSwgYXV0b2ZsdXNoPUZhbHNlLCBiaW5kPWVuZ2luZSkKCkJhc2UgPSBkZWNsYXJhdGl2ZV9iYXNlKCkKCjw8PDw8PDwgSEVBRAo9PT09PT09Cgo+Pj4+Pj4+IG1haW4KZGVmIGdldF9kYigpOgogICAgZGIgPSBTZXNzaW9uTG9jYWwoKQogICAgdHJ5OgogICAgICAgIHlpZWxkIGRiCiAgICBmaW5hbGx5OgogICAgICAgIGRiLmNsb3NlKCkKCg==
Ck91dHB1dCBqc29uIHdpdGggdGhlIDIga2V5cyAnZXhwbGFuYXRpb24nIGFuZCAnY29kZScuIFRoZSBmaXJzdCBrZXkncyB2YWx1ZSAoc3RyKSBzaG91bGQgZXhwbGFpbiB3aGF0IHN0ZXBzIHlvdSB0b29rIHRvIHJlc29sdmUgdGhlIG1lcmdlIGNvbmZsaWN0cyBhbmQgd2h5IHlvdSBkaWQgc28uIFRoZSBzZWNvbmQga2V5J3MgdmFsdWUgKHN0cikgaXMgdGhlIG1lcmdlIGNvbmZsaWN0IHJlc29sdmVkIGNvZGUuIApKdXN0IG91dHB1dCB0aGUgY29kZSBzbyB0aGF0IGl0IGNhbiBiZSB3cml0dGVuIHRvIGEgZmlsZSAoLnB5LCAubWQsIGV0Yy4pIHdpdGhvdXQgZXJyb3JzLgoKTWVyZ2UgY29uZmxpY3RlZCBmaWxlIGNvbnRlbnQ6Cjw8PDw8PDwgSEVBRApmcm9tIGZhc3RhcGkgaW1wb3J0IEZhc3RBUEksIERlcGVuZHMsIEhUVFBFeGNlcHRpb24sIHN0YXR1cwpmcm9tIC4gaW1wb3J0IGF1dGgsIG1vZGVscywgc2NoZW1hcwo9PT09PT09CmZyb20gZmFzdGFwaSBpbXBvcnQgRmFzdEFQSSwgRGVwZW5kcywgSFRUUEV4Y2VwdGlvbgpmcm9tIC4gaW1wb3J0IHNjaGVtYXMsIG1vZGVscwpmcm9tIHNxbGFsY2hlbXkub3JtIGltcG9ydCBTZXNzaW9uCmZyb20gLmRlcGVuZGVuY2llcyBpbXBvcnQgZ2V0X2RiCmZyb20gLnJvdXRlLmNhbGN1bGF0ZSBpbXBvcnQgY2FsY3VsYXRlX3JvdXRlCj4+Pj4+Pj4gbWFpbgoKYXBwID0gRmFzdEFQSSgpCgoKQGFwcC5nZXQoIi9zdGF0dXMiKQpkZWYgcmVhZF9zdGF0dXMoKToKICAgIHJldHVybiB7InN0YXR1cyI6ICJTZXJ2aWNlIGlzIHVwIGFuZCBydW5uaW5nIn0KCjw8PDw8PDwgSEVBRApAYXBwLnBvc3QoIi90b2tlbiIsIHJlc3BvbnNlX21vZGVsPXNjaGVtYXMuVG9rZW4pCmFzeW5jIGRlZiBsb2dpbl9mb3JfYWNjZXNzX3Rva2VuKGZvcm1fZGF0YTogc2NoZW1hcy5Ub2tlblJlcXVlc3RGb3JtID0gRGVwZW5kcygpKToKICAgIHVzZXIgPSBhdXRoLmF1dGhlbnRpY2F0ZV91c2VyKGZvcm1fZGF0YS51c2VybmFtZSwgZm9ybV9kYXRhLnBhc3N3b3JkKQogICAgaWYgbm90IHVzZXI6CiAgICAgICAgcmFpc2UgSFRUUEV4Y2VwdGlvbigKICAgICAgICAgICAgc3RhdHVzX2NvZGU9c3RhdHVzLkhUVFBfNDAxX1VOQVVUSE9SSVpFRCwKICAgICAgICAgICAgZGV0YWlsPSJJbmNvcnJlY3QgdXNlcm5hbWUgb3IgcGFzc3dvcmQiLAogICAgICAgICAgICBoZWFkZXJzPXsiV1dXLUF1dGhlbnRpY2F0ZSI6ICJCZWFyZXIifSwKICAgICAgICApCiAgICBhY2Nlc3NfdG9rZW4gPSBhdXRoLmNyZWF0ZV9hY2Nlc3NfdG9rZW4oZGF0YT17InN1YiI6IHVzZXIudXNlcm5hbWV9KQogICAgcmV0dXJuIHsiYWNjZXNzX3Rva2VuIjogYWNjZXNzX3Rva2VuLCAidG9rZW5fdHlwZSI6ICJiZWFyZXIifQoKQGFwcC5nZXQoIi91c2Vycy9tZSIsIHJlc3BvbnNlX21vZGVsPXNjaGVtYXMuVXNlcikKYXN5bmMgZGVmIHJlYWRfdXNlcnNfbWUoY3VycmVudF91c2VyOiBtb2RlbHMuVXNlciA9IERlcGVuZHMoYXV0aC5nZXRfY3VycmVudF91c2VyKSk6CiAgICByZXR1cm4gY3VycmVudF91c2VyCj09PT09PT0KCkBhcHAucG9zdCgiL3BhY2thZ2VzL3twYWNrYWdlX2lkfS9jYWxjdWxhdGUtcm91dGUiLCByZXNwb25zZV9tb2RlbD1zY2hlbWFzLlJvdXRlKQpkZWYgY2FsY3VsYXRlX3BhY2thZ2Vfcm91dGUocGFja2FnZV9pZDogc3RyLCBkYjogU2Vzc2lvbiA9IERlcGVuZHMoZ2V0X2RiKSk6CiAgICBkYl9wYWNrYWdlID0gKAogICAgICAgIGRiLnF1ZXJ5KG1vZGVscy5QYWNrYWdlKS5maWx0ZXIobW9kZWxzLlBhY2thZ2UuaWQgPT0gcGFja2FnZV9pZCkuZmlyc3QoKQogICAgKQogICAgaWYgZGJfcGFja2FnZSBpcyBOb25lOgogICAgICAgIHJhaXNlIEhUVFBFeGNlcHRpb24oc3RhdHVzX2NvZGU9NDA0LCBkZXRhaWw9IlBhY2thZ2Ugbm90IGZvdW5kIikKCiAgICByb3V0ZV9kZXRhaWxzID0gY2FsY3VsYXRlX3JvdXRlKGRiX3BhY2thZ2UuY3VycmVudF9sb2NhdGlvbiwgZGJfcGFja2FnZS5kZXN0aW5hdGlvbikKICAgICMgU2F2ZSByb3V0ZSBkZXRhaWxzIHRvIHRoZSBkYXRhYmFzZSBhbmQgcmV0dXJuIHRoZW0KICAgICMgLi4uCj4+Pj4+Pj4gbWFpbgoK
Ck91dHB1dCBqc29uIHdpdGggdGhlIDIga2V5cyAnZXhwbGFuYXRpb24nIGFuZCAnY29kZScuIFRoZSBmaXJzdCBrZXkncyB2YWx1ZSAoc3RyKSBzaG91bGQgZXhwbGFpbiB3aGF0IHN0ZXBzIHlvdSB0b29rIHRvIHJlc29sdmUgdGhlIG1lcmdlIGNvbmZsaWN0cyBhbmQgd2h5IHlvdSBkaWQgc28uIFRoZSBzZWNvbmQga2V5J3MgdmFsdWUgKHN0cikgaXMgdGhlIG1lcmdlIGNvbmZsaWN0IHJlc29sdmVkIGNvZGUuIApKdXN0IG91dHB1dCB0aGUgY29kZSBzbyB0aGF0IGl0IGNhbiBiZSB3cml0dGVuIHRvIGEgZmlsZSAoLnB5LCAubWQsIGV0Yy4pIHdpdGhvdXQgZXJyb3JzLgoKTWVyZ2UgY29uZmxpY3RlZCBmaWxlIGNvbnRlbnQ6Cjw8PDw8PDwgSEVBRApmcm9tIHNxbGFsY2hlbXkgaW1wb3J0IENvbHVtbiwgSW50ZWdlciwgU3RyaW5nCmZyb20gc3FsYWxjaGVteS5leHQuZGVjbGFyYXRpdmUgaW1wb3J0IGRlY2xhcmF0aXZlX2Jhc2UKPT09PT09PQpmcm9tIHNxbGFsY2hlbXkgaW1wb3J0IEludGVnZXIsIENvbHVtbiwgRm9yZWlnbktleSwgU3RyaW5nLCBEYXRlVGltZQpmcm9tIHNxbGFsY2hlbXkuZXh0LmRlY2xhcmF0aXZlIGltcG9ydCBkZWNsYXJhdGl2ZV9iYXNlCmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lCj4+Pj4+Pj4gbWFpbgoKQmFzZSA9IGRlY2xhcmF0aXZlX2Jhc2UoKQoKCjw8PDw8PDwgSEVBRApjbGFzcyBVc2VyKEJhc2UpOgogICAgX190YWJsZW5hbWVfXyA9ICJ1c2VycyIKCiAgICBpZCA9IENvbHVtbihJbnRlZ2VyLCBwcmltYXJ5X2tleT1UcnVlLCBpbmRleD1UcnVlKQogICAgdXNlcm5hbWUgPSBDb2x1bW4oU3RyaW5nLCB1bmlxdWU9VHJ1ZSwgaW5kZXg9VHJ1ZSkKICAgIGhhc2hlZF9wYXNzd29yZCA9IENvbHVtbihTdHJpbmcpCj09PT09PT0KY2xhc3MgUGFja2FnZShCYXNlKToKICAgIF9fdGFibGVuYW1lX18gPSAicGFja2FnZXMiCgogICAgaWQgPSBDb2x1bW4oU3RyaW5nLCBwcmltYXJ5X2tleT1UcnVlLCBpbmRleD1UcnVlKQogICAgc3RhdHVzID0gQ29sdW1uKFN0cmluZykKICAgIGRlc2NyaXB0aW9uID0gQ29sdW1uKFN0cmluZykKICAgIGxhc3RfdXBkYXRlZCA9IENvbHVtbihEYXRlVGltZSwgZGVmYXVsdD1kYXRldGltZS51dGNub3cpCgoKY2xhc3MgUm91dGUoQmFzZSk6CiAgICBfX3RhYmxlbmFtZV9fID0gInJvdXRlcyIKCiAgICBpZCA9IENvbHVtbihJbnRlZ2VyLCBwcmltYXJ5X2tleT1UcnVlLCBpbmRleD1UcnVlKQogICAgcGFja2FnZV9pZCA9IENvbHVtbihTdHJpbmcsIEZvcmVpZ25LZXkoInBhY2thZ2VzLmlkIikpCiAgICBjdXJyZW50X2xvY2F0aW9uID0gQ29sdW1uKFN0cmluZykKICAgIGRlc3RpbmF0aW9uID0gQ29sdW1uKFN0cmluZykKICAgIGVzdGltYXRlZF9hcnJpdmFsID0gQ29sdW1uKERhdGVUaW1lKQo+Pj4+Pj4+IG1haW4KCg==
Ck91dHB1dCBqc29uIHdpdGggdGhlIDIga2V5cyAnZXhwbGFuYXRpb24nIGFuZCAnY29kZScuIFRoZSBmaXJzdCBrZXkncyB2YWx1ZSAoc3RyKSBzaG91bGQgZXhwbGFpbiB3aGF0IHN0ZXBzIHlvdSB0b29rIHRvIHJlc29sdmUgdGhlIG1lcmdlIGNvbmZsaWN0cyBhbmQgd2h5IHlvdSBkaWQgc28uIFRoZSBzZWNvbmQga2V5J3MgdmFsdWUgKHN0cikgaXMgdGhlIG1lcmdlIGNvbmZsaWN0IHJlc29sdmVkIGNvZGUuIApKdXN0IG91dHB1dCB0aGUgY29kZSBzbyB0aGF0IGl0IGNhbiBiZSB3cml0dGVuIHRvIGEgZmlsZSAoLnB5LCAubWQsIGV0Yy4pIHdpdGhvdXQgZXJyb3JzLgoKTWVyZ2UgY29uZmxpY3RlZCBmaWxlIGNvbnRlbnQ6CmZyb20gcHlkYW50aWMgaW1wb3J0IEJhc2VNb2RlbAo8PDw8PDw8IEhFQUQKCmNsYXNzIFRva2VuKEJhc2VNb2RlbCk6CiAgICBhY2Nlc3NfdG9rZW46IHN0cgogICAgdG9rZW5fdHlwZTogc3RyCgpjbGFzcyBUb2tlblJlcXVlc3RGb3JtKEJhc2VNb2RlbCk6CiAgICB1c2VybmFtZTogc3RyCiAgICBwYXNzd29yZDogc3RyCgpjbGFzcyBVc2VyKEJhc2VNb2RlbCk6CiAgICB1c2VybmFtZTogc3RyCgogICAgY2xhc3MgQ29uZmlnOgogICAgICAgIG9ybV9tb2RlID0gVHJ1ZQoKIyBBZGRpdGlvbmFsIHNjaGVtYXMgY2FuIGJlIGFkZGVkIGhlcmUKPT09PT09PQpmcm9tIGRhdGV0aW1lIGltcG9ydCBkYXRldGltZQpmcm9tIHR5cGluZyBpbXBvcnQgT3B0aW9uYWwKCgpjbGFzcyBQYWNrYWdlQmFzZShCYXNlTW9kZWwpOgogICAgaWQ6IHN0cgogICAgZGVzY3JpcHRpb246IE9wdGlvbmFsW3N0cl0gPSBOb25lCgoKY2xhc3MgUGFja2FnZUNyZWF0ZShQYWNrYWdlQmFzZSk6CiAgICBwYXNzCgoKY2xhc3MgUGFja2FnZShQYWNrYWdlQmFzZSk6CiAgICBzdGF0dXM6IHN0cgogICAgbGFzdF91cGRhdGVkOiBkYXRldGltZQoKICAgIGNsYXNzIENvbmZpZzoKICAgICAgICBvcm1fbW9kZSA9IFRydWUKPj4+Pj4+PiBtYWluCgo=
